FROM registry.access.redhat.com/ubi9/nodejs-20:latest AS staticbuilder

USER root
RUN npm install -g yarn

# Copy files needed for downloading dependencies
COPY ./package.json /builder/package.json
COPY ./yarn.lock /builder/yarn.lock
WORKDIR /builder

RUN chown -R default:root /builder

USER default

# The sources are not copied yet, so this step is cached between different builds
# with modified sources, as long as the files above have not changed.
RUN yarn && yarn cache clean --force

# Copy the sources and build the app.
# Changes in other files won't invalidate the cached build.
COPY ./src /builder/src
COPY ./public /builder/public
COPY ./tsconfig.json /builder/tsconfig.json
COPY ./tsconfig.eslint.json /builder/tsconfig.eslint.json
COPY ./.eslintrc.js /builder/.eslintrc.js
RUN REACT_APP_DISABLE_SENTRY=1 yarn build

FROM registry.access.redhat.com/ubi9/nginx-124:latest
EXPOSE 8000
COPY --from=staticbuilder ./builder/build /usr/share/nginx/html
WORKDIR /usr/share/nginx/html

# Copy default environment config and setup script
# Copy package.json so env.sh can read it
COPY ./scripts/env.sh /opt/env.sh
COPY .env /opt/.env
COPY package.json /opt/package.json

#COPY ./nginx/variables.conf /etc/nginx/templates/10-variables.conf.template

# Copy script that injects environment variables to nginx.conf
COPY ./scripts/nginx-env.sh /opt/nginx-env.sh
# The script copies /opt/nginx.conf to /etc/nginx/nginx.conf
# while replacing the environment variables
COPY ./nginx/nginx.conf /opt/nginx.conf
USER root
RUN chmod +x /opt/env.sh
RUN chmod +x /opt/nginx-env.sh
USER default

ENV REACT_APP_DISABLE_SENTRY=1

CMD ["/bin/bash", "-c", "/opt/env.sh /opt /usr/share/nginx/html && /opt/nginx-env.sh && nginx -g \"daemon off;\""]
